# bot.py
import asyncio
import os
import re
import sqlite3
import uuid
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
import calendar as cal
from google import genai

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
load_dotenv()
BOT_TOKEN = "8060762724:AAFXjNaBbnPOtlPUp0rJpF1YBAxepH7wHMg"
# –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö –∫–ª—é—á –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è OPENAI_API_KEY –∏–ª–∏ GOOGLE_API_KEY
GOOGLE_API_KEY = "AIzaSyDuRm1NgCLhNp9mBJzska8t3cmJiPfmeOU"
DB_PATH = os.getenv("DB_PATH", "calendar.db")
TRANSLATIONS_DB = os.getenv("TRANSLATIONS_DB", "translations.db")

if not BOT_TOKEN or not GOOGLE_API_KEY:
    raise RuntimeError("Set BOT_TOKEN and OPENAI_API_KEY / GOOGLE_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = genai.Client(api_key=GOOGLE_API_KEY)

MAX_FREE_REQUESTS = 5  # –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥–µ–Ω—å

# ----------------- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ -----------------
user_state = {}            # {user_id: state dict or string}
pending_post_calendar = {} # {token: {"user_id": uid, "text": text}}
user_language = {}         # {user_id: "ru"|"en"|"am"}
user_requests = {}         # {user_id: {"count": int, "last_reset": datetime}}

# ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è translations.db -----------------
def init_translations_db(path=TRANSLATIONS_DB):
    if os.path.exists(path):
        return
    conn = sqlite3.connect(path)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE translations (
        key TEXT,
        lang TEXT,
        text TEXT,
        PRIMARY KEY (key, lang)
    )
    """)
    data = [
        ("start", "ru", "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"),
        ("start", "en", "üëã Hello! Choose your language:"),
        ("start", "am", "üëã ‘≤’°÷Ä÷á! ‘∏’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂:"),
        ("menu", "ru", "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π\n\n–£—Å–ª—É–≥–∏:\n/idea ‚Äî –∏–¥–µ–∏ –ø–æ—Å—Ç–æ–≤ –∏ —Ä–∏–ª—Å–æ–≤\n/calendar ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å—Ç–æ–≤\n/tip ‚Äî —Å–æ–≤–µ—Ç—ã –¥–Ω—è\n/language ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"),
        ("menu", "en", "‚úÖ Language set: English\n\nServices:\n/idea ‚Äî post & reels ideas\n/calendar ‚Äî post calendar\n/tip ‚Äî daily tips\n/language ‚Äî change language"),
        ("menu", "am", "‚úÖ ‘º’•’¶’∏÷Ç’∂ ’®’∂’ø÷Ä’æ’°’Æ ’ß’ù ’Ä’°’µ’•÷Ä’•’∂\n\n‘æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä:\n/idea ‚Äî ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’´ ÷á ’º’´’¨’Ω’•÷Ä’´ ’£’°’≤’°÷É’°÷Ä’∂’•÷Ä\n/calendar ‚Äî ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’´ ÷Ö÷Ä’°÷Å’∏÷Ç’µ÷Å\n/tip ‚Äî ÷Ö÷Ä’æ’° ’≠’∏÷Ä’∞’∏÷Ç÷Ä’§’∂’•÷Ä\n/language ‚Äî ÷É’∏’≠’•’¨ ’¨’•’¶’∏÷Ç’∂"),
        ("choose_lang", "ru", "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"),
        ("choose_lang", "en", "Choose your language:"),
        ("choose_lang", "am", "‘∏’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂:"),
        ("ask_niche", "ru", "‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏, –∫–∞–∫–∞—è —É —Ç–µ–±—è –Ω–∏—à–∞, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏."),
        ("ask_niche", "en", "‚úèÔ∏è Great! Tell me your niche and I‚Äôll generate ideas."),
        ("ask_niche", "am", "‚úèÔ∏è ‘≥’•÷Ä’°’¶’°’∂÷Å÷â ’Ü’∑’´÷Ä ÷Ñ’∏ ’©’•’¥’°’∂, ÷á ’•’Ω ’£’°’≤’°÷É’°÷Ä’∂’•÷Ä ’Ø’Ω’ø’•’≤’Æ’•’¥÷â"),
        ("limit", "ru", "‚ùå –õ–∏–º–∏—Ç 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞."),
        ("limit", "en", "‚ùå Limit of 5 requests per day. Try again tomorrow or support for unlimited access."),
        ("limit", "am", "‚ùå ’ï÷Ä’æ’° ’Ω’°’∞’¥’°’∂’°’π’°÷É’®’ù 5 ’∞’°÷Ä÷Å’∏÷Ç’¥’∂’•÷Ä÷â ’ì’∏÷Ä’±’•÷Ñ ’æ’°’≤’®÷â"),
        ("calendar_menu", "ru", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        ("calendar_menu", "en", "Choose an action:"),
        ("calendar_menu", "am", "‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"),
        ("show_posts", "ru", "üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"),
        ("show_posts", "en", "üìÖ Show scheduled posts"),
        ("show_posts", "am", "üìÖ ’ë’∏÷Ç÷Å’°’§÷Ä’•’¨ ’∫’¨’°’∂’°’æ’∏÷Ä’æ’°’Æ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’®"),
        ("add_post", "ru", "üìù –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç"),
        ("add_post", "en", "üìù Add your post"),
        ("add_post", "am", "üìù ‘±’æ’•’¨’°÷Å’∂’•’¨ ’Ω’•÷É’°’Ø’°’∂ ’£÷Ä’°’º’∏÷Ç’¥"),
        ("gen_random", "ru", "üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç"),
        ("gen_random", "en", "üé≤ Generate a random post"),
        ("gen_random", "am", "üé≤ ’ç’ø’•’≤’Æ’•’¨ ’∫’°’ø’°’∞’°’Ø’°’∂ ’£÷Ä’°’º’∏÷Ç’¥"),
        ("choose_date", "ru", "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–µ–µ):"),
        ("choose_date", "en", "üìÜ Choose a date (future only):"),
        ("choose_date", "am", "üìÜ ‘∏’∂’ø÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’® (’¥’´’°’µ’∂ ’¥’∏’ø’´’Ø ’°’∫’°’£’°):"),
        ("choose_hour", "ru", "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å (—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ):"),
        ("choose_hour", "en", "‚è∞ Choose an hour (future only):"),
        ("choose_hour", "am", "‚è∞ ‘∏’∂’ø÷Ä’•÷Ñ ’™’°’¥’® (’¥’´’°’µ’∂ ’°’∫’°’£’°):"),
        ("reminder_choice", "ru", "–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"),
        ("reminder_choice", "en", "When to remind?"),
        ("reminder_choice", "am", "‘µ÷Ä’¢ ’∞’´’∑’•÷Å’∏÷Ç’¥ ’∏÷Ç’≤’°÷Ä’Ø’•’¨?"),
        ("rem_1440", "ru", "–ó–∞ 24 —á–∞—Å–∞"),
        ("rem_1440", "en", "24 hours before"),
        ("rem_1440", "am", "24 ’™’°’¥ ’°’º’°’ª"),
        ("rem_60", "ru", "–ó–∞ 1 —á–∞—Å"),
        ("rem_60", "en", "1 hour before"),
        ("rem_60", "am", "1 ’™’°’¥ ’°’º’°’ª"),
        ("rem_10", "ru", "–ó–∞ 10 –º–∏–Ω—É—Ç"),
        ("rem_10", "en", "10 minutes before"),
        ("rem_10", "am", "10 ÷Ä’∏’∫’• ’°’º’°’ª"),
        ("rem_none", "ru", "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        ("rem_none", "en", "No reminder"),
        ("rem_none", "am", "‘±’º’°’∂÷Å ’∞’´’∑’•÷Å’¥’°’∂"),
        ("added", "ru", "‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!"),
        ("added", "en", "‚úÖ Post scheduled!"),
        ("added", "am", "‚úÖ ‘≥÷Ä’°’º’∏÷Ç’¥’® ’∫’¨’°’∂’°’æ’∏÷Ä’æ’•÷Å÷â"),
        ("no_posts", "ru", "üì≠ –í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—É—Å—Ç."),
        ("no_posts", "en", "üì≠ Your calendar is empty."),
        ("no_posts", "am", "üì≠ ’Å’•÷Ä ÷Ö÷Ä’°÷Å’∏÷Ç’µ÷Å’® ’§’°’ø’°÷Ä’Ø ’ß÷â"),
        ("status_sent", "ru", "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
        ("status_sent", "en", "‚úÖ Sent"),
        ("status_sent", "am", "‚úÖ ’à÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’ß"),
        ("status_scheduled", "ru", "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"),
        ("status_scheduled", "en", "‚è≥ Scheduled"),
        ("status_scheduled", "am", "‚è≥ ’ä’¨’°’∂’°’æ’∏÷Ä’æ’°’Æ"),
        ("mark_posted", "ru", "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"),
        ("mark_posted", "en", "Mark as posted"),
        ("mark_posted", "am", "’Ü’∑’•’¨ ’∏÷Ä’∫’•’Ω ’∞÷Ä’°’∫’°÷Ä’°’Ø’æ’°’Æ"),
        ("delete", "ru", "–£–¥–∞–ª–∏—Ç—å"),
        ("delete", "en", "Delete"),
        ("delete", "am", "’ã’∂’ª’•’¨"),
        ("posted_ok", "ru", "üéâ –ì–æ—Ç–æ–≤–æ! –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ."),
        ("posted_ok", "en", "üéâ Great! Marked as posted."),
        ("posted_ok", "am", "üéâ ’ä’°’ø÷Ä’°’Ω’ø ’ß÷â ’Ü’∑’æ’•÷Å ’∏÷Ä’∫’•’Ω ’∞÷Ä’°’∫’°÷Ä’°’Ø’æ’°’Æ÷â"),
        ("deleted_ok", "ru", "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."),
        ("deleted_ok", "en", "üóëÔ∏è Deleted from calendar."),
        ("deleted_ok", "am", "üóëÔ∏è ’Ä’•’º’°÷Å’æ’•÷Å ÷Ö÷Ä’°÷Å’∏÷Ç’µ÷Å’´÷Å÷â"),
        ("reminder", "ru", "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à –ø–æ—Å—Ç –≤—ã–π–¥–µ—Ç —Å–∫–æ—Ä–æ:"),
        ("reminder", "en", "‚è∞ Reminder: your post is coming soon:"),
        ("reminder", "am", "‚è∞ ’Ä’´’∑’•÷Å’∏÷Ç’¥‚Ä§ ’±’•÷Ä ’£÷Ä’°’º’∏÷Ç’¥’® ’∑’∏÷Ç’ø’∏’æ ’Ø’∞÷Ä’°’∫’°÷Ä’°’Ø’æ’´‚Ä§"),
        ("add_to_calendar", "ru", "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"),
        ("add_to_calendar", "en", "Add to calendar"),
        ("add_to_calendar", "am", "‘±’æ’•’¨’°÷Å’∂’•’¨ ÷Ö÷Ä’°÷Å’∏÷Ç’µ÷Å’∏÷Ç’¥"),
        ("write_your_post", "ru", "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞:"),
        ("write_your_post", "en", "‚úèÔ∏è Send the text of your post:"),
        ("write_your_post", "am", "‚úèÔ∏è ’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’±’•÷Ä ’£÷Ä’°’º’¥’°’∂ ’ø’•÷Ñ’Ω’ø’®:"),
        ("post_label", "ru", "–ò–¥–µ—è –ø–æ—Å—Ç–∞"),
        ("post_label", "en", "Post idea"),
        ("post_label", "am", "‘≥÷Ä’°’º’¥’°’∂ ’£’°’≤’°÷É’°÷Ä"),
        ("reel_label", "ru", "–ò–¥–µ—è —Ä–∏–ª—Å–∞"),
        ("reel_label", "en", "Reel idea"),
        ("reel_label", "am", "’å’´’¨’Ω’´ ’£’°’≤’°÷É’°÷Ä"),
        ("gen_fail", "ru", "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."),
        ("gen_fail", "en", "‚ùå Idea generation failed. Please try again."),
        ("gen_fail", "am", "‚ùå ‘≥’°’≤’°÷É’°÷Ä’∂’•÷Ä’´ ’Ω’ø’•’≤’Æ’∏÷Ç’¥’® ’π’Ω’ø’°÷Å’æ’•÷Å÷â"),
    ]
    cur.executemany("INSERT INTO translations(key, lang, text) VALUES (?, ?, ?)", data)
    conn.commit()
    conn.close()

init_translations_db()

# ----------------- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ -----------------
def get_translation(key, lang):
    try:
        conn = sqlite3.connect(TRANSLATIONS_DB)
        cur = conn.cursor()
        cur.execute("SELECT text FROM translations WHERE key=? AND lang=?", (key, lang))
        row = cur.fetchone()
        conn.close()
        return row[0] if row else key
    except Exception:
        return key

# ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DB –∫–∞–ª–µ–Ω–¥–∞—Ä—è -----------------
if not os.path.exists(DB_PATH):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE posts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        post_text TEXT,
        publish_datetime TEXT,
        sent INTEGER DEFAULT 0,
        reminded INTEGER DEFAULT 0,
        reminder_offset INTEGER DEFAULT 1440
    )
    """)
    conn.commit()
    conn.close()

conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
cols = [c[1] for c in cursor.execute("PRAGMA table_info(posts)").fetchall()]
if 'reminder_offset' not in cols:
    try:
        cursor.execute("ALTER TABLE posts ADD COLUMN reminder_offset INTEGER DEFAULT 1440")
        conn.commit()
    except Exception:
        pass

# ----------------- –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ -----------------
def check_limit(user_id):
    now = datetime.now()
    data = user_requests.get(user_id)
    if not data or (now - data["last_reset"]).days >= 1:
        user_requests[user_id] = {"count": 0, "last_reset": now}
        return True
    return data["count"] < MAX_FREE_REQUESTS

def increment_requests(user_id):
    if user_id not in user_requests:
        user_requests[user_id] = {"count": 1, "last_reset": datetime.now()}
    else:
        user_requests[user_id]["count"] += 1

# ----------------- UI helpers -----------------
def lang_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang:en")],
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru")],
        [InlineKeyboardButton(text="üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂", callback_data="lang:am")]
    ])

def calendar_menu_kb(uid):
    lang = user_language.get(uid, "ru")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_translation("show_posts", lang), callback_data="show_posts")],
        [InlineKeyboardButton(text=get_translation("add_post", lang), callback_data="custom_post")],
        [InlineKeyboardButton(text=get_translation("gen_random", lang), callback_data="gen_random")]
    ])

def add_to_calendar_kb(token, uid):
    lang = user_language.get(uid, "ru")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_translation("add_to_calendar", lang), callback_data=f"calendar:{token}")]
    ])

def post_item_kb(uid, pid, sent):
    if sent:
        return None
    lang = user_language.get(uid, "ru")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_translation("mark_posted", lang), callback_data=f"posted:{pid}")],
        [InlineKeyboardButton(text=get_translation("delete", lang), callback_data=f"delete:{pid}")]
    ])

# ----------------- –ö–∞–ª–µ–Ω–¥–∞—Ä—å (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) -----------------
def month_header(uid, year, month, token=None):
    name = cal.month_name[month]
    token_part = f":{token}" if token else ""
    return [
        InlineKeyboardButton(text="¬´", callback_data=f"cal:prev:{year}:{month}{token_part}"),
        InlineKeyboardButton(text=f"{name} {year}", callback_data="ignore"),
        InlineKeyboardButton(text="¬ª", callback_data=f"cal:next:{year}:{month}{token_part}")
    ]

def weekday_row(uid):
    lang = user_language.get(uid, "ru")
    if lang == "ru":
        wd = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    elif lang == "am":
        wd = ["‘µ÷Ä’Ø","‘µ÷Ä÷Ñ","’â’∏÷Ä","’Ä’∂’£","’à÷Ç÷Ä","’á’¢","‘ø’´÷Ä"]
    else:
        wd = ["Mo","Tu","We","Th","Fr","Sa","Su"]
    return [InlineKeyboardButton(text=w, callback_data="ignore") for w in wd]

def create_month_calendar(uid, year=None, month=None, token=None):
    now = datetime.now()
    if year is None: year = now.year
    if month is None: month = now.month

    first_wd, last_day = cal.monthrange(year, month)  # first_wd: 0=Mon
    grid = []
    week = []

    # Fill empty days before first weekday
    for _ in range(first_wd):
        week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    for day in range(1, last_day+1):
        # disable past days in current month
        if year == now.year and month == now.month and day < now.day:
            week.append(InlineKeyboardButton(text=str(day), callback_data="ignore"))
        else:
            cb = f"pickday:{year}:{month}:{day}"
            week.append(InlineKeyboardButton(text=str(day), callback_data=cb))
        if len(week) == 7:
            grid.append(week)
            week = []

    if week:
        while len(week) < 7:
            week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        grid.append(week)

    kb = [month_header(uid, year, month, token), weekday_row(uid)]
    kb.extend(grid)
    return InlineKeyboardMarkup(inline_keyboard=kb)

def create_hour_keyboard(uid, year, month, day):
    now = datetime.now()
    rows = []
    row = []
    for h in range(24):
        if year == now.year and month == now.month and day == now.day and h <= now.hour:
            row.append(InlineKeyboardButton(text=f"{h:02d}:00", callback_data="ignore"))
        else:
            row.append(InlineKeyboardButton(text=f"{h:02d}:00", callback_data=f"pickhour:{h}"))
        if len(row) == 6:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ----------------- Gemini helper (retry with backoff) -----------------
async def generate_with_retry(prompt, retries=4, base_delay=1):
    delay = base_delay
    last_exc = None
    for i in range(retries):
        try:
            resp = client.models.generate_content(model="gemini-2.5-flash", contents=prompt)
            text = getattr(resp, "text", None)
            if text:
                return text
            last_exc = Exception("Empty response")
        except Exception as e:
            last_exc = e
            # if overloaded, wait and retry
            await asyncio.sleep(delay)
            delay *= 2
    raise last_exc

# ----------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π -----------------
async def generate_ideas(uid, niche):
    lang = user_language.get(uid, "ru")
    human = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "am": "Armenian"}[lang]
    prompt = (
        f"–Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞: {human}. –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏ 2 –∏–¥–µ–∏ –¥–ª—è —Ä–∏–ª—Å–æ–≤ –¥–ª—è –Ω–∏—à–∏ –Ω–∏–∂–µ.\n"
        "–°—Ç—Ä–æ–≥–æ –ø–æ–º–µ—Ç—å –∏–¥–µ–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö: /post1, /post2, /post3, /reel1, /reel2.\n"
        "–ò–¥–µ–∏ –ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É: –∑–∞–≥–æ–ª–æ–≤–æ–∫/ –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π /—Ç–µ–∫—Å—Ç –ø–æ–¥ –ø–æ—Å—Ç –∏–ª–∏ —Ä–∏–ª—Å /—Ö–µ—à—Ç–µ–≥–∏ \n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–∞–π –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–¥–µ–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å—É—Ç—å, CTA, –≤–∏–∑—É–∞–ª).\n"
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ: {human}.\n–ù–∏—à–∞: {niche}"
    )
    try:
        answer = await generate_with_retry(prompt)
    except Exception:
        await bot.send_message(uid, get_translation("gen_fail", lang))
        return

    # —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π —Ç–æ–∂–µ)
    parts = re.split(r'(/post\d+|/reel\d+|/–ø–æ—Å—Ç\d+|/—Ä–∏–ª—Å\d+)', answer, flags=re.IGNORECASE)
    ideas = []
    for i in range(1, len(parts), 2):
        tag = parts[i].strip()
        text = parts[i+1].strip() if i+1 < len(parts) else ""
        ideas.append((tag, text))

    if not ideas:
        # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Å—ë –∫–∞–∫ –æ–¥–∏–Ω –±–ª–æ–∫
        token = str(uuid.uuid4())
        pending_post_calendar[token] = {"user_id": uid, "text": answer}
        await bot.send_message(uid, answer, reply_markup=add_to_calendar_kb(token, uid))
        return

    for tag, text in ideas:
        token = str(uuid.uuid4())
        pending_post_calendar[token] = {"user_id": uid, "text": text}
        label_key = "post_label" if re.search(r'post|–ø–æ—Å—Ç', tag, re.IGNORECASE) else "reel_label"
        label = get_translation(label_key, lang)
        await bot.send_message(uid, f"{label}\n\n{text}", reply_markup=add_to_calendar_kb(token, uid))

# ----------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ -----------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        get_translation("start", "ru") + "\n\n" + get_translation("start", "en") + "\n\n" + get_translation("start", "am"),
        reply_markup=lang_keyboard()
    )

@dp.message(Command("language"))
async def cmd_language(message: Message):
    uid = message.from_user.id
    await message.answer(get_translation("choose_lang", user_language.get(uid, "ru")), reply_markup=lang_keyboard())

@dp.message(Command("tip"))
async def cmd_tip(message: Message):
    uid = message.from_user.id
    lang = user_language.get(uid, "ru")
    tips = {
        "ru": ["üéØ –°—Ç–∞–≤—å —Ü–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ ‚Äî –≤–æ–≤–ª–µ—á—å, –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –æ–±—É—á–∏—Ç—å!", "üî• –ü–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã ‚Äî –∫–ª—é—á–µ–≤—ã–µ!"],
        "en": ["üéØ Give each post a goal: engage, sell, or educate.", "üî• First 3 seconds are crucial!"],
        "am": ["üéØ ’Ö’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’£÷Ä’°’º’¥’°’∂ ’∞’°’¥’°÷Ä ’∂’∑’´÷Ä ’∂’∫’°’ø’°’Ø÷â", "üî• ‘±’º’°’ª’´’∂ 3 ’æ’°’µ÷Ä’Ø’µ’°’∂’® ’Ø’°÷Ä÷á’∏÷Ä ’ß÷â"]
    }
    tip = tips[lang][datetime.now().day % len(tips[lang])]
    await message.answer(get_translation("tip_title", lang) + "\n" + tip)

@dp.message(Command("idea"))
async def cmd_idea(message: Message):
    uid = message.from_user.id
    user_state[uid] = "waiting_for_niche"
    await message.answer(get_translation("ask_niche", user_language.get(uid, "ru")))

@dp.message(Command("calendar"))
async def cmd_calendar(message: Message):
    uid = message.from_user.id
    await message.answer(get_translation("calendar_menu", user_language.get(uid, "ru")), reply_markup=calendar_menu_kb(uid))

# ----------------- Callback router (–≤—Å–µ inline-–∫–Ω–æ–ø–∫–∏) -----------------
@dp.callback_query()
async def cb_router(query: CallbackQuery):
    uid = query.from_user.id
    data = (query.data or "")

    # language selection: "lang:en"
    if data.startswith("lang:"):
        lang = data.split(":", 1)[1]
        user_language[uid] = lang
        user_state.pop(uid, None)
        await query.message.answer(get_translation("menu", lang))
        await query.answer()
        return

    if data == "ignore":
        await query.answer()
        return

    # calendar menu:
    if data == "show_posts":
        lang = user_language.get(uid, "ru")
        cursor.execute("SELECT id, post_text, publish_datetime, sent FROM posts WHERE user_id=? ORDER BY publish_datetime", (uid,))
        rows = cursor.fetchall()
        if not rows:
            await query.message.answer(get_translation("no_posts", lang))
        else:
            for pid, text, dt, sent in rows:
                status = get_translation("status_sent", lang) if sent else get_translation("status_scheduled", lang)
                await query.message.answer(f"{text}\nüïí {dt if dt else '-'} | {status}", reply_markup=post_item_kb(uid, pid, sent))
        await query.answer()
        return

    if data == "custom_post":
        user_state[uid] = {"step": "await_custom_text"}
        await query.message.answer(get_translation("write_your_post", user_language.get(uid, "ru")))
        await query.answer()
        return

    if data == "gen_random":
        lang = user_language.get(uid, "ru")
        human = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "am": "Armenian"}[lang]
        prompt = (
            f"Language: {human}. Generate a single practical social media post idea for a content creator.\n"
            "Return it in the user's language. Put token /post1 on its own line before the idea.\n"
            "Include CTA and visual suggestions."
        )
        try:
            text = await generate_with_retry(prompt)
        except Exception:
            await query.message.answer(get_translation("gen_fail", lang))
            await query.answer()
            return
        # parse token /post1 optionally
        parts = re.split(r'(/post\d+)', text, flags=re.IGNORECASE)
        idea_text = parts[2].strip() if len(parts) >= 3 else text
        token = str(uuid.uuid4())
        pending_post_calendar[token] = {"user_id": uid, "text": idea_text}
        await query.message.answer(get_translation("post_label", lang) + "\n\n" + idea_text, reply_markup=add_to_calendar_kb(token, uid))
        await query.answer()
        return

    # add idea to calendar: calendar:token
    if data.startswith("calendar:"):
        token = data.split(":", 1)[1]
        pending = pending_post_calendar.get(token)
        if not pending or pending.get("user_id") != uid:
            await query.answer(get_translation("gen_fail", user_language.get(uid, "ru")))
            return
        now = datetime.now()
        user_state[uid] = {"step": "calendar_pick_day", "year": now.year, "month": now.month, "token": token}
        await query.message.answer(get_translation("choose_date", user_language.get(uid, "ru")), reply_markup=create_month_calendar(uid, now.year, now.month, token))
        await query.answer()
        return

    # calendar month navigation: cal:prev:YYYY:MM[:token]
    if data.startswith("cal:"):
        parts = data.split(":")
        # parts example: ["cal", "prev", "2025", "8", "<token>"]
        if len(parts) < 4:
            await query.answer()
            return
        cmd = parts[1]
        year = int(parts[2]); month = int(parts[3])
        token = parts[4] if len(parts) >= 5 else None
        today = datetime.now()
        if cmd == "prev":
            # allow prev only if resulting month >= current month
            new_month = month - 1
            new_year = year
            if new_month == 0:
                new_month = 12; new_year -= 1
            # prevent navigating to months completely in the past
            if new_year < today.year or (new_year == today.year and new_month < today.month):
                await query.answer()
                return
            year, month = new_year, new_month
        else:  # next
            new_month = month + 1
            new_year = year
            if new_month == 13:
                new_month = 1; new_year += 1
            year, month = new_year, new_month

        st = user_state.get(uid, {}) or {}
        st.update({"step": "calendar_pick_day", "year": year, "month": month})
        if token:
            st["token"] = token
        user_state[uid] = st
        try:
            await query.message.edit_reply_markup(reply_markup=create_month_calendar(uid, year, month, token))
        except Exception:
            await query.message.answer(create_month_calendar(uid, year, month, token))
        await query.answer()
        return

    # pickday:pickday:YYYY:MM:DD
    if data.startswith("pickday:"):
        parts = data.split(":")
        if len(parts) != 4:  # should be pickday:YYYY:MM:DD
            await query.answer()
            return
        y, mo, d = int(parts[1]), int(parts[2]), int(parts[3])
        now = datetime.now()
        if y == now.year and mo == now.month and d < now.day:
            await query.answer()
            return
        st = user_state.get(uid, {}) or {}
        st.update({"step": "calendar_pick_hour", "year": y, "month": mo, "day": d})
        user_state[uid] = st
        await query.message.answer(get_translation("choose_hour", user_language.get(uid, "ru")), reply_markup=create_hour_keyboard(uid, y, mo, d))
        await query.answer()
        return

    # pick hour: pickhour:H
    if data.startswith("pickhour:"):
        parts = data.split(":")
        if len(parts) != 2:
            await query.answer()
            return
        hour = int(parts[1])
        st = user_state.get(uid)
        if not st or st.get("step") != "calendar_pick_hour":
            await query.answer()
            return
        token = st.get("token")
        if not token:
            await query.answer(get_translation("gen_fail", user_language.get(uid, "ru")))
            return
        pending = pending_post_calendar.get(token)
        if not pending:
            await query.answer(get_translation("gen_fail", user_language.get(uid, "ru")))
            return
        text = pending.get("text")
        y, mo, day = st["year"], st["month"], st["day"]
        publish_dt = datetime(y, mo, day, hour, 0)
        st.update({"step": "choose_reminder", "publish_dt": publish_dt.isoformat()})
        user_state[uid] = st
        lang = user_language.get(uid, "ru")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=get_translation("rem_1440", lang), callback_data="rem:1440")],
            [InlineKeyboardButton(text=get_translation("rem_60", lang), callback_data="rem:60")],
            [InlineKeyboardButton(text=get_translation("rem_10", lang), callback_data="rem:10")],
            [InlineKeyboardButton(text=get_translation("rem_none", lang), callback_data="rem:-1")],
        ])
        await query.message.answer(get_translation("reminder_choice", lang), reply_markup=kb)
        await query.answer()
        return

    # reminder selection rem:X
    if data.startswith("rem:"):
        parts = data.split(":")
        if len(parts) != 2:
            await query.answer()
            return
        minutes = int(parts[1])
        st = user_state.get(uid)
        if not st or st.get("step") != "choose_reminder":
            await query.answer()
            return
        publish_dt = datetime.fromisoformat(st.get("publish_dt"))
        token = st.get("token")
        pending = pending_post_calendar.get(token)
        if not pending:
            await query.answer(get_translation("gen_fail", user_language.get(uid, "ru")))
            return
        text = pending.get("text")
        cursor.execute(
            "INSERT INTO posts (user_id, post_text, publish_datetime, sent, reminded, reminder_offset) VALUES (?,?,?,?,?,?)",
            (uid, text, publish_dt.strftime("%Y-%m-%d %H:%M"), 0, 0, (minutes if minutes >= 0 else -1))
        )
        conn.commit()
        await query.message.answer(f"{get_translation('added', user_language.get(uid, 'ru'))}\n{text}\nüïí {publish_dt.strftime('%Y-%m-%d %H:%M')}")
        pending_post_calendar.pop(token, None)
        user_state.pop(uid, None)
        await query.answer()
        return

    # delete
    if data.startswith("delete:"):
        pid = int(data.split(":",1)[1])
        cursor.execute("DELETE FROM posts WHERE id=?", (pid,))
        conn.commit()
        await query.message.answer(get_translation("deleted_ok", user_language.get(uid, "ru")))
        await query.answer()
        return

    # posted
    if data.startswith("posted:"):
        pid = int(data.split(":",1)[1])
        cursor.execute("UPDATE posts SET sent=1 WHERE id=?", (pid,))
        conn.commit()
        await query.message.answer(get_translation("posted_ok", user_language.get(uid, "ru")))
        await query.answer()
        return

    await query.answer()

# ----------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---------------
@dp.message()
async def messages_handler(message: Message):
    uid = message.from_user.id
    st = user_state.get(uid)

    # awaiting custom post text
    if isinstance(st, dict) and st.get("step") == "await_custom_text":
        text = message.text.strip()
        if not text:
            await message.answer("‚ùå Empty text")
            return
        token = str(uuid.uuid4())
        pending_post_calendar[token] = {"user_id": uid, "text": text}
        now = datetime.now()
        user_state[uid] = {"step": "calendar_pick_day", "year": now.year, "month": now.month, "token": token}
        await message.answer(get_translation("choose_date", user_language.get(uid, "ru")), reply_markup=create_month_calendar(uid, now.year, now.month, token))
        return

    # niche input for /idea
    if st == "waiting_for_niche":
        if not check_limit(uid):
            await message.answer(get_translation("limit", user_language.get(uid, "ru")))
            return
        user_state[uid] = None
        increment_requests(uid)
        niche = message.text.strip()
        await generate_ideas(uid, niche)
        return

    # otherwise ignore or handle other free text
    # (could add more flows here)
    return

# ----------------- Reminder background task -----------------
async def reminder_task():
    while True:
        now = datetime.now()
        cursor.execute("SELECT id, user_id, post_text, publish_datetime, reminded, reminder_offset FROM posts WHERE sent=0")
        rows = cursor.fetchall()
        for pid, uid, text, dt_s, reminded, offset in rows:
            try:
                publish_dt = datetime.strptime(dt_s, "%Y-%m-%d %H:%M")
            except Exception:
                continue
            if offset is None:
                offset = 1440
            # if offset < 0 => no reminder
            if offset < 0:
                continue
            remind_time = publish_dt - timedelta(minutes=offset)
            # send reminder if not yet sent and now >= remind_time
            if not reminded and now >= remind_time:
                lang = user_language.get(uid, "ru")
                try:
                    kb = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=get_translation("mark_posted", lang), callback_data=f"posted:{pid}")]
                    ])
                    await bot.send_message(uid, f"{get_translation('reminder', lang)}\n{text}\nüïí {dt_s}", reply_markup=kb)
                    cursor.execute("UPDATE posts SET reminded=1 WHERE id=?", (pid,))
                    conn.commit()
                except Exception:
                    # ignore send failures (user blocked bot etc.)
                    pass
        await asyncio.sleep(30)

# ----------------- –ó–∞–ø—É—Å–∫ -----------------
async def main():
    # —Å—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    asyncio.create_task(reminder_task())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

